1. 회원가입, 로그인, 로그아웃, 회원탈퇴 기능 백엔드 구현
public Integer registerUser(UserDTO userDTO) {
        System.out.println("여기는 service 등록이야 :" +userDTO);
        if (userRepository.existsByEmail(userDTO.getEmail())) {
            throw new IllegalArgumentException("이미 사용 중인 이메일입니다.");
        }

        // User 엔티티 생성 (필요에 따라 나머지 필드도 설정)
        User user = User.builder()
                .name(userDTO.getName())
                .email(userDTO.getEmail())
                .password(passwordEncoder.encode(userDTO.getPassword()))
                .phone(userDTO.getPhone())
                .roleNames(userDTO.getRoleNames())
                .totalSpent(BigDecimal.ONE)
                .createdAt(Timestamp.valueOf(LocalDateTime.now()))
                .build();
        log.info("user:" +user);
        User savedUser = userRepository.saveAndFlush(user);
        // 기본 멤버십 자동 생성
        Membership membership = new Membership();
        membership.setUser(savedUser);
        membership.setCategory(Membership.Category.GOLD);
        membership.setDiscount(BigDecimal.ZERO);
        membership.setValidUntil(null);
        membership.setStatus(Membership.Status.ACTIVE);

        membershipRepository.save(membership);

        return savedUser.getId();
    }

@DeleteMapping("/member/{userId}")
    public ResponseEntity<String> deleteUser(@PathVariable Integer userId,
                                             HttpServletResponse response) {
        // 1. 회원 삭제
        userService.deleteUserById(userId);

        // 2. Refresh Token 쿠키 삭제
        Cookie cookie = new Cookie("refreshToken", null);
        cookie.setHttpOnly(true);
        cookie.setPath("/");
        cookie.setMaxAge(0); // 즉시 만료
        response.addCookie(cookie);

        // 3. 응답 반환
        return ResponseEntity.ok("회원탈퇴 및 토큰 삭제 완료");
    }


2. KakaoMap API를 이용한 '오시는 길' 지도 서비스 구현
<script src="//dapi.kakao.com/v2/maps/sdk.js?appkey=8d4d3f03c48461c7aca5c087ee21d6e3&libraries=services"></script>

// 지도가 그려질 HTML 요소 선택
    const container = document.getElementById("map");

    // 지도를 표시할 때 필요한 기본 옵션 설정
    const options = {
      center: new window.kakao.maps.LatLng(37.350233, 127.108716), // 미금역 좌표
      level: 3, // 지도의 확대/축소 레벨
    };

    // 지도 객체 생성
    const map = new window.kakao.maps.Map(container, options);
    map.setZoomable(true); // 마우스 휠 확대 허용
    map.addControl(
      new window.kakao.maps.ZoomControl(),
      window.kakao.maps.ControlPosition.RIGHT
    );

    // 마커 생성 및 지도에 표시
    const marker = new window.kakao.maps.Marker({
      position: options.center, // 마커 위치를 지도 중심으로 설정
      map: map, // 마커를 표시할 지도 객체
    });


3. DatabaseInitializer를 통한 객실, 레스토랑, 베이커리, 룸서비스 초기 데이터 등록 및 조회 기능 구현
// 객실 초기값 설정
            if (residenceRepo.count() == 0) {
                residenceRepo.saveAll(List.of(
                        new Residence(null, Residence.Type.ROOM, "디럭스 파크 뷰 룸", "싱그러운 자연을 배경으로 즐기는 조용한 나만의 공간",
                                new BigDecimal("250000"), 2, Residence.Status.AVAILABLE, new ArrayList<>()),
                        new Residence(null, Residence.Type.ROOM, "그랜드 디럭스 룸", "상쾌한 아침과 함께하는 휴식",
                                new BigDecimal("180000"), 2, Residence.Status.AVAILABLE, new ArrayList<>()),
                        new Residence(null, Residence.Type.ROOM, "프리미어 룸", "일상에서 벗어나 누리는 편안함",
                                new BigDecimal("90000"), 2, Residence.Status.AVAILABLE, new ArrayList<>()),
                        new Residence(null, Residence.Type.ROOM, "프리미어 스위트", "특별한 사람과 함께 소중한 추억을 장식하는 공간",
                                new BigDecimal("50000"), 2, Residence.Status.AVAILABLE, new ArrayList<>()),
                        new Residence(null, Residence.Type.ROOM, "디럭스 스위트", "넓은 거실과 정교한 인테리어가 선사하는 편안함",
                                new BigDecimal("150000"), 2, Residence.Status.AVAILABLE, new ArrayList<>()),
                        new Residence(null, Residence.Type.ROOM, "코너 스위트", "한강 뷰와 함께하는 프라이빗하고 특별한 공간",
                                new BigDecimal("200000"), 2, Residence.Status.AVAILABLE, new ArrayList<>())
                ));
            }


4. Product 엔티티를 설계하여 객실, 레스토랑, 베이커리, 룸서비스 관련 이미지 데이터 관리 기능 구현 및 초기 데이터 등록
// Residence 이미지 등록
            // Residence는 room*_*도 있기 때문에 room*로 나눈 후 room*_*작업 진행
            List<Residence> residences = residenceRepo.findAll(Sort.by("id")); // id 기준 정렬

            for (int i = 0; i < residences.size(); i++) {
                Residence residence = residences.get(i);
                String roomKey = "room" + (i + 1); // room1 ~ room6

                for (int j = 0; j < 3; j++) {
                    String fileName = roomKey + (j == 0 ? ".jpg" : "_" + j + ".jpg"); // room1.jpg, room1_1.jpg, ...

                    Product p = new Product();
                    p.setFileName(fileName);
                    p.setFilePath(fileName); // 또는 "upload/residence/" + fileName
                    p.setFileType("image/jpeg");
                    p.setDelFlag(false);
                    p.setResidence(residence);
                    productRepo.save(p);
                }
            }

// Bakery 이미지 등록
            List<Bakery> bakeries = bakeryRepo.findAll(Sort.by("id")); // ID순 정렬

            for (int i = 0; i < bakeries.size(); i++) {
                Bakery bakery = bakeries.get(i);
                String fileName = "bakery" + (i + 1) + ".jpg";

                Product p = new Product();
                p.setFileName(fileName);
                p.setFilePath("upload/bakery/" + fileName);
                p.setFileType("image/jpeg");
                p.setDelFlag(false);
                p.setBakery(bakery);
                productRepo.save(p);
            }


5. DatabaseInitializer를 통한 멤버십 기본 할인율 데이터 등록 기능 구현
// 멤버십 기본 할인율 설정
            if (membershipRepo.count() == 0) {
                membershipRepo.saveAll(List.of(
                        new Membership(null, null, Membership.Category.TRINITY, new BigDecimal("0.30"), null, Membership.Status.ACTIVE),
                        new Membership(null, null, Membership.Category.DIAMOND, new BigDecimal("0.20"), null, Membership.Status.ACTIVE),
                        new Membership(null, null, Membership.Category.GOLD, new BigDecimal("0.10"), null, Membership.Status.ACTIVE)
                ));
            }


6. DatabaseInitializer를 통한 관리자 계정 기본 데이터 등록 기능 구현
// 관리자 계정이 없을 경우 생성
            if (userRepository.count() == 0 || userRepository.findByEmail("admin@atelier.com").isEmpty()) {
                User admin = User.builder()
                        .name("관리자")
                        .email("admin@atelier.com")
                        .password(passwordEncoder.encode("admin1234")) // 암호화 된 비밀번호
                        .phone("010-0000-0000")
                        .roleNames(User.Role.STAFF)
                        .totalSpent(BigDecimal.ZERO)
                        .refundableAmount(BigDecimal.ZERO)
                        .build();

                userRepository.save(admin);
            }


7. 마이페이지 DTO 설계 및 사용자 정보, 멤버십, 결제 내역, 리뷰 내역 통합 조회 기능 백엔드 구현
// payment
        List<PaymentDTO> paymentDTOS = paymentRepository.findByUserId(user.getId()).stream()
                .map(p -> PaymentDTO.fromEntity(p))
                .toList();
        System.out.println("서비스 코드 paymentDTOS :" +paymentDTOS);

        // review
        List<ReviewDTO> reviewDTOS = reviewRepository.findByUserId(user.getId()).stream()
                .map(r ->ReviewDTO.fromEntity(r))
                .toList();
        System.out.println("서비스 코드 reviewDTOS :" +reviewDTOS);

        // 새로운 DTO생성 후 반환
        return new MyPageDTO(
                user.getId(),
                user.getName(),
                user.getEmail(),
                totalSpent,
                role,
                joinedAt,
                reservationDTOS,
                membershipDTO,
                orderDTOS,
                paymentDTOS,
                reviewDTOS
        );


8. 핸드폰 번호를 이용한 아이디 찾기 기능 백엔드 및 프론트엔드 구현
@Override
    public String findByNameAndPhone(String name, String phone) {
        log.info("이름: {}, 전화번호: {}", name, phone);

        return userRepository.findByNameAndPhone(name, phone)
                .map(User::getEmail)
                .orElseThrow(()-> new UsernameNotFoundException("해당 이름의 사용자를 찾을 수 없습니다."));
    }


9. 이메일 인증(네이버 SMTP, JavaMailSender 사용)을 통한 임시 비밀번호 발급 및 비밀번호 변경 기능 백엔드 및 프론트엔드 구현
 @Override
    public void sendTempPassword(String email) {
        log.info("임시 비밀번호 전송 시작 - {}", email);
        try {
            User user = userRepository.findByEmail(email)
                    .orElseThrow(() -> new UsernameNotFoundException("해당 이메일이 존재하지 않습니다."));
            String tempPassword = UUID.randomUUID().toString().substring(0, 8);
            user.setPassword(passwordEncoder.encode(tempPassword));
            userRepository.save(user);
            emailService.sendPasswordResetEmail(email, tempPassword);
        } catch (Exception e) {
            log.error("sendTempPassword 에러:", e);
            throw e;
        }
    }

    @Override
    public void resetPasswordWithTemp(String email, String tempPassword, String newPassword) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(()-> new UsernameNotFoundException("사용자를 찾을 수 없습니다."));

        if (!passwordEncoder.matches(tempPassword, user.getPassword())) {
            throw new IllegalArgumentException("임시 비밀번호가 일치하지 않습니다.");
        }

        user.setPassword(passwordEncoder.encode(newPassword));
        userRepository.save(user);
    }

    @Override
    public void changePassword(String email, String currentPw, String newPw) {
        User user = userRepository.findByEmail(email)
                .orElseThrow(()-> new UsernameNotFoundException("사용자를 찾을 수 없습니다."));

        if (!passwordEncoder.matches(currentPw, user.getPassword())){
                throw new IllegalArgumentException("현재 비밀번호가 일치하지 않습니다.");
        }

        user.setPassword(passwordEncoder.encode(newPw));
        userRepository.save(user);
    }


10. 객실, 레스토랑, 베이커리, 룸서비스, 예약, 리뷰의 CRUD(Create, Read, Update, Delete) 기능 백엔드 구현
@Override
    public List<ReviewDTO> get(Integer userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("해당 사용자가 존재하지 않습니다."));
        return reviewRepository.findByUserId(user.getId())
                .stream()
                .map(review -> modelMapper.map(review, ReviewDTO.class))
                .collect(Collectors.toList());
    }

@Override
    public ReviewDTO modify(Integer id, ReviewDTO reviewDTO) {
        Review review = reviewRepository.findById(id)
                .orElseThrow(() -> new RuntimeException("해당 리뷰가 존재하지 않습니다."));

        review.setRating(reviewDTO.getRating());
        review.setTitle(reviewDTO.getTitle());
        review.setComment(reviewDTO.getComment());

        Review updated = reviewRepository.save(review);
        return modelMapper.map(updated, ReviewDTO.class);
    }
11. 관리자 페이지에서 예약 내역 전체 조회 및 사용자 ID별 예약 내역 조회 기능 백엔드 구현
@Override
    public List<ReservationDTO> get(Integer userId) {
        System.out.println("1) reservation service userid:" + userId);
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new RuntimeException("해당 사용자가 존재하지 않습니다."));
        System.out.println("2) user " + user);
        // user 객체 대신 user의 id를 전달
        List<Reservation> result = reservationRepository.findByUserId(user.getId());
        System.out.println("3) result:" + result);
        List<ReservationDTO> resultDtoList = new ArrayList<>();
        result.forEach(i -> {
            ReservationDTO data = modelMapper.map(i, ReservationDTO.class);
            resultDtoList.add(data);
        });
        return resultDtoList;
    }

@Override
    public List<ReservationDTO> getAllReservations() {
        List<Reservation> result = reservationRepository.findAll(); // 모든 멤버십 조회
        List<ReservationDTO> resultDtoList = new ArrayList<>(); // DTO타입으로 새로 담을 리스트 생성

        result.forEach(i -> { // Optional이므로 멤버십이 존재할 경우에만(ifPresent) DTO로 변환
            ReservationDTO data = modelMapper.map(i, ReservationDTO.class); // 엔티티를 DTO타입으로 변환
            resultDtoList.add(data); // DTO타입을 DTO리스트에 저장
        });
        return resultDtoList; // 결과 DTO 리스트 반환
    }